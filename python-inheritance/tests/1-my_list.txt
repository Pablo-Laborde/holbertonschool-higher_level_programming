>>> MyList = __import__('1-my_list').MyList


Empty
>>> my_list = MyList()
>>> print(my_list)
[]
>>> my_list.print_sorted()
[]


One Element
>>> my_list = MyList()
>>> my_list.append(1)
>>> print(my_list)
[1]
>>> my_list.print_sorted()
[1]


Two Elemnts Sorted
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(3)
>>> print(my_list)
[1, 3]
>>> my_list.print_sorted()
[1, 3]


Two Elemnts Unsorted
>>> my_list = MyList()
>>> my_list.append(4)
>>> my_list.append(1)
>>> print(my_list)
[4, 1]
>>> my_list.print_sorted()
[1, 4]


NaN values
>>> my_list = MyList()
>>> my_list.append('nan')
>>> print(my_list)
['nan']
>>> my_list.print_sorted()
['nan']


Type checks

>>> type(my_list) == MyList
True

>>> issubclass(MyList, list)
True


------- Examples that doesn't add checks


Three Elemnts Unsorted
>>> my_list = MyList()
>>> my_list.append(4)
>>> my_list.append(1)
>>> my_list.append(3)
>>> print(my_list)
[4, 1, 3]
>>> my_list.print_sorted()
[1, 3, 4]


Large Exaqmple
>>> my_list = MyList()
>>> my_list.append(-2)
>>> my_list.append(8)
>>> my_list.append(20)
>>> my_list.append(-5)
>>> my_list.append(4)
>>> my_list.append(1)
>>> my_list.append(0)
>>> print(my_list)
[-2, 8, 20, -5, 4, 1, 0]
>>> my_list.print_sorted()
[-5, -2, 0, 1, 4, 8, 20]


TypeError Example
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append("True")
>>> print(my_list)
[1, 'True']
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'str' and 'int'


None type
>>> my_list = None
>>> print(my_list)
None
>>> my_list.print_sorted()
Traceback (most recent call last):
AttributeError: 'NoneType' object has no attribute 'print_sorted'